---
const services = [
  {
    id: 'fotografia',
    name: 'Fotograf√≠a',
    description: 'Retratos profesionales, cobertura de eventos y fotograf√≠a de producto para redes sociales.',
    image: '/images/fotografia-preview.svg',
    icon: 'üì∏',
    color: '#FF7A59'
  },
  {
    id: 'video',
    name: 'Video',
    description: 'Reels din√°micos, clips promocionales y videos corporativos con edici√≥n profesional.',
    image: '/images/video-preview.svg',
    icon: 'üé¨',
    color: '#00C2A8'
  },
  {
    id: 'dron',
    name: 'Dron',
    description: 'Tomas a√©reas espectaculares para eventos, festivales y promociones inmobiliarias.',
    image: '/images/dron-preview.svg',
    icon: 'üöÅ',
    color: '#8B5CF6'
  },
  {
    id: 'redes',
    name: 'Redes Sociales',
    description: 'Estrategia de contenido, edici√≥n optimizada y gesti√≥n completa para Instagram y TikTok.',
    image: '/images/redes-preview.svg',
    icon: 'üì±',
    color: '#F59E0B'
  }
];
---

<section class="services-section" id="servicios">
  <div class="services-container">
    <div class="services-wheel-container">
      <div class="services-wheel" id="servicesWheel">
        <div class="wheel-center" id="wheelCenter">
          <div class="center-content">
            <span class="center-icon" id="centerIcon">üì∏</span>
            <span class="center-label" id="centerLabel">Fotograf√≠a</span>
          </div>
        </div>
        
        {services.map((service, index) => (
          <div 
            class="wheel-item" 
            data-service={service.id}
            data-index={index}
            style={`--rotation: ${index * 90}deg; --color: ${service.color}`}
          >
            <div class="wheel-item-content">
              <span class="service-icon">{service.icon}</span>
            </div>
          </div>
        ))}
      </div>
    </div>

    <div class="service-details" id="serviceDetails">
      {services.map((service, index) => (
        <div 
          class={`service-detail ${index === 0 ? 'active' : ''}`}
          data-service={service.id}
        >
          <div class="detail-content">
            <h2 class="service-title">{service.name}</h2>
            <p class="service-description">{service.description}</p>
            <a href={`/${service.id}`} class="btn btn-secondary service-btn">
              Ver m√°s ejemplos
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M7 17L17 7M17 7H7M17 7V17"/>
              </svg>
            </a>
          </div>
          
          <div class="service-image">
            <img 
              src={service.image} 
              alt={`Ejemplo de ${service.name}`}
              loading="lazy"
            />
            <div class="image-overlay"></div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Progress indicator -->
  <div class="scroll-progress" id="scrollProgress">
    <div class="progress-bar"></div>
  </div>
</section>

<style>
  .services-section {
    min-height: 100vh;
    padding: var(--spacing-xl) 0;
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
    position: relative;
    overflow: hidden;
  }

  .services-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--spacing-sm);
    display: grid;
    grid-template-columns: 400px 1fr;
    gap: var(--spacing-xl);
    align-items: center;
    min-height: 80vh;
  }

  /* RUEDA DE SERVICIOS */
  .services-wheel-container {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .services-wheel {
    position: relative;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    box-shadow: var(--shadow-lg);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .wheel-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 120px;
    height: 120px;
    background: var(--color-white);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow-md);
    border: 3px solid var(--color-accent);
    transition: all var(--transition-normal);
    z-index: 10;
  }

  .center-content {
    text-align: center;
  }

  .center-icon {
    font-size: 2rem;
    display: block;
    margin-bottom: var(--spacing-xs);
  }

  .center-label {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--color-dark);
    font-family: var(--font-display);
  }

  .wheel-item {
    position: absolute;
    width: 80px;
    height: 80px;
    top: 50%;
    left: 50%;
    transform-origin: 0 0;
    transform: translate(-50%, -50%) rotate(var(--rotation)) translateY(-110px);
  }

  .wheel-item-content {
    width: 100%;
    height: 100%;
    background: var(--color-white);
    border: 3px solid var(--color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--transition-normal);
    box-shadow: var(--shadow-md);
    transform: rotate(calc(-1 * var(--rotation)));
  }

  .wheel-item-content:hover {
    transform: rotate(calc(-1 * var(--rotation))) scale(1.1);
    box-shadow: var(--shadow-lg);
  }

  .wheel-item.active .wheel-item-content {
    background: var(--color);
    color: white;
    transform: rotate(calc(-1 * var(--rotation))) scale(1.2);
  }

  .service-icon {
    font-size: 1.5rem;
  }

  /* DETALLES DEL SERVICIO */
  .service-details {
    position: relative;
  }

  .service-detail {
    display: none;
    grid-template-columns: 1fr 300px;
    gap: var(--spacing-lg);
    align-items: center;
    opacity: 0;
    transform: translateX(30px);
    transition: all var(--transition-normal);
  }

  .service-detail.active {
    display: grid;
    opacity: 1;
    transform: translateX(0);
    animation: slideInRight 0.6s ease-out;
  }

  .detail-content h2 {
    font-size: 2.5rem;
    margin-bottom: var(--spacing-sm);
    color: var(--color-dark);
  }

  .detail-content p {
    font-size: 1.1rem;
    line-height: 1.7;
    margin-bottom: var(--spacing-md);
    color: var(--color-gray-dark);
  }

  .service-btn {
    display: inline-flex;
    align-items: center;
    gap: var(--spacing-xs);
  }

  .service-image {
    position: relative;
    border-radius: 16px;
    overflow: hidden;
    aspect-ratio: 4/3;
    box-shadow: var(--shadow-lg);
  }

  .service-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-slow);
  }

  .service-image:hover img {
    transform: scale(1.05);
  }

  .image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, transparent 60%, rgba(0, 0, 0, 0.2));
  }

  /* PROGRESS INDICATOR */
  .scroll-progress {
    position: fixed;
    bottom: var(--spacing-md);
    right: var(--spacing-md);
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border: 2px solid var(--color-accent);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 100;
  }

  .progress-bar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 3px solid transparent;
    border-top: 3px solid var(--color-accent);
    transition: transform var(--transition-normal);
  }

  /* ANIMACIONES */
  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(50px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes rotateWheel {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* RESPONSIVE */
  @media (max-width: 1024px) {
    .services-container {
      grid-template-columns: 1fr;
      gap: var(--spacing-lg);
      text-align: center;
    }

    .services-wheel {
      width: 250px;
      height: 250px;
    }

    .wheel-center {
      width: 100px;
      height: 100px;
    }

    .wheel-item {
      width: 60px;
      height: 60px;
      transform: translate(-50%, -50%) rotate(var(--rotation)) translateY(-95px);
    }

    .service-detail {
      grid-template-columns: 1fr;
      text-align: center;
    }

    .service-image {
      max-width: 400px;
      margin: 0 auto;
    }
  }

  @media (max-width: 768px) {
    .services-wheel {
      width: 200px;
      height: 200px;
    }

    .wheel-center {
      width: 80px;
      height: 80px;
    }

    .center-icon {
      font-size: 1.5rem;
    }

    .center-label {
      font-size: 0.8rem;
    }

    .wheel-item {
      width: 50px;
      height: 50px;
      transform: translate(-50%, -50%) rotate(var(--rotation)) translateY(-75px);
    }

    .service-icon {
      font-size: 1.2rem;
    }

    .detail-content h2 {
      font-size: 2rem;
    }
  }
</style>

<script>
  class ServicesWheel {
    constructor() {
      this.currentService = 0;
      this.services = ['fotografia', 'video', 'dron', 'redes'];
      this.wheelItems = document.querySelectorAll('.wheel-item');
      this.serviceDetails = document.querySelectorAll('.service-detail');
      this.centerIcon = document.getElementById('centerIcon');
      this.centerLabel = document.getElementById('centerLabel');
      
      this.init();
    }

    init() {
      this.bindEvents();
      this.updateDisplay();
      this.startAutoRotation();
    }

    bindEvents() {
      // Click en elementos de la rueda
      this.wheelItems.forEach((item, index) => {
        item.addEventListener('click', () => {
          this.setActiveService(index);
        });
      });

      // Scroll para cambiar servicio
      let isScrolling = false;
      window.addEventListener('scroll', () => {
        if (isScrolling) return;
        
        isScrolling = true;
        setTimeout(() => {
          this.handleScroll();
          isScrolling = false;
        }, 100);
      });
    }

    setActiveService(index) {
      this.currentService = index;
      this.updateDisplay();
    }

    updateDisplay() {
      // Actualizar elementos de la rueda
      this.wheelItems.forEach((item, index) => {
        item.classList.toggle('active', index === this.currentService);
      });

      // Actualizar detalles del servicio
      this.serviceDetails.forEach((detail, index) => {
        detail.classList.toggle('active', index === this.currentService);
      });

      // Actualizar centro de la rueda
      const serviceData = this.getServiceData(this.currentService);
      if (this.centerIcon && this.centerLabel && serviceData) {
        this.centerIcon.textContent = serviceData.icon;
        this.centerLabel.textContent = serviceData.name;
      }

      // Actualizar color del centro
      const wheelCenter = document.getElementById('wheelCenter');
      if (wheelCenter && serviceData) {
        wheelCenter.style.borderColor = serviceData.color;
      }
    }

    getServiceData(index) {
      const serviceDataMap = {
        0: { icon: 'üì∏', name: 'Fotograf√≠a', color: '#FF7A59' },
        1: { icon: 'üé¨', name: 'Video', color: '#00C2A8' },
        2: { icon: 'üöÅ', name: 'Dron', color: '#8B5CF6' },
        3: { icon: 'üì±', name: 'Redes Sociales', color: '#F59E0B' }
      };
      return serviceDataMap[index];
    }

    handleScroll() {
      const section = document.getElementById('servicios');
      if (!section) return;

      const rect = section.getBoundingClientRect();
      const sectionHeight = rect.height;
      const scrollProgress = Math.max(0, Math.min(1, -rect.top / (sectionHeight - window.innerHeight)));
      
      // Cambiar servicio basado en scroll
      const newService = Math.floor(scrollProgress * this.services.length);
      if (newService !== this.currentService && newService < this.services.length) {
        this.setActiveService(newService);
      }

      // Actualizar indicador de progreso
      this.updateProgressIndicator(scrollProgress);
    }

    updateProgressIndicator(progress) {
      const progressBar = document.querySelector('.progress-bar');
      if (progressBar) {
        progressBar.style.transform = `rotate(${progress * 360}deg)`;
      }
    }

    startAutoRotation() {
      // Auto-rotaci√≥n cada 5 segundos si no hay interacci√≥n
      let autoRotationTimer;
      
      const resetTimer = () => {
        clearInterval(autoRotationTimer);
        autoRotationTimer = setInterval(() => {
          this.setActiveService((this.currentService + 1) % this.services.length);
        }, 5000);
      };

      // Pausar auto-rotaci√≥n en interacci√≥n
      document.addEventListener('scroll', resetTimer);
      this.wheelItems.forEach(item => {
        item.addEventListener('click', resetTimer);
      });

      resetTimer();
    }
  }

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', () => {
    new ServicesWheel();
  });
</script>
