---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';

const fotografias = [
  {
    id: 1,
    title: 'Festival Musical - Escenario Principal',
    category: 'eventos',
    tags: ['festival', 'música', 'escenario'],
    image: '/images/portfolio/festival-poster.svg',
    description: 'Cobertura del escenario principal durante la presentación del artista headliner.',
    details: {
      evento: 'Summer Music Festival 2024',
      ubicacion: 'Parque Central',
      duracion: '8 horas',
      fotos_entregadas: 150
    }
  },
  {
    id: 2,
    title: 'Colección Joyería Premium',
    category: 'producto',
    tags: ['joyería', 'producto', 'comercial'],
    image: '/images/portfolio/jewelry-collection.svg',
    description: 'Sesión de producto para nueva colección de joyería artesanal con detalles en oro.',
    details: {
      cliente: 'Aureum Jewelry',
      productos: 25,
      setup: 'Estudio profesional',
      retoque: 'Avanzado'
    }
  },
  {
    id: 3,
    title: 'Evento Corporativo - Networking',
    category: 'corporativo',
    tags: ['corporativo', 'networking', 'profesional'],
    image: '/images/portfolio/night-event.svg',
    description: 'Documentación de evento de networking y presentación de nuevos productos.',
    details: {
      evento: 'Tech Innovation Summit',
      asistentes: 200,
      cobertura: '6 horas',
      entregables: 'Galería + Highlights'
    }
  },
  {
    id: 4,
    title: 'Sesión Moda Urbana',
    category: 'moda',
    tags: ['moda', 'urbano', 'lookbook'],
    image: '/images/portfolio/urban-fashion.svg',
    description: 'Lookbook para marca de ropa urbana con locaciones en la ciudad.',
    details: {
      marca: 'Urban Threads',
      modelos: 3,
      looks: 15,
      locaciones: 'Exteriores urbanos'
    }
  },
  {
    id: 5,
    title: 'Retrato Artista Musical',
    category: 'retratos',
    tags: ['retrato', 'artista', 'promocional'],
    image: '/images/portfolio/artist-portrait.svg',
    description: 'Sesión de retratos promocionales para álbum y redes sociales.',
    details: {
      artista: 'Luna Martínez',
      sesion: '2 horas',
      outfits: 4,
      estilo: 'Artístico contemporáneo'
    }
  },
  {
    id: 6,
    title: 'Evento Gastronómico',
    category: 'gastronomia',
    tags: ['gastronomía', 'evento', 'chef'],
    image: '/images/portfolio/night-event.svg',
    description: 'Cobertura de evento gastronómico con chefs reconocidos.',
    details: {
      evento: 'Culinary Masters 2024',
      chefs: 8,
      platos: 30,
      ambiente: 'Fine dining'
    }
  },
  {
    id: 7,
    title: 'Sesión Productos Cosméticos',
    category: 'producto',
    tags: ['cosméticos', 'beauty', 'producto'],
    image: '/images/portfolio/cosmetics-products.svg',
    description: 'Fotografía de productos para línea de cosméticos naturales.',
    details: {
      marca: 'Natural Glow',
      productos: 18,
      estilo: 'Clean minimal',
      iluminacion: 'Natural + estudio'
    }
  },
  {
    id: 8,
    title: 'Behind the Scenes - Setup',
    category: 'bts',
    tags: ['bts', 'setup', 'proceso'],
    image: '/images/fotografia/bts-setup.jpg',
    description: 'Documentación del proceso de montaje de iluminación profesional.',
    details: {
      proyecto: 'Sesión de moda',
      equipo: 'Profoto + natural',
      setup_time: '2 horas',
      complejidad: 'Alta'
    }
  }
];

const categorias = [
  { id: 'todos', name: 'Todos', count: fotografias.length },
  { id: 'eventos', name: 'Eventos', count: fotografias.filter(f => f.category === 'eventos').length },
  { id: 'producto', name: 'Producto', count: fotografias.filter(f => f.category === 'producto').length },
  { id: 'moda', name: 'Moda', count: fotografias.filter(f => f.category === 'moda').length },
  { id: 'retratos', name: 'Retratos', count: fotografias.filter(f => f.category === 'retratos').length },
  { id: 'corporativo', name: 'Corporativo', count: fotografias.filter(f => f.category === 'corporativo').length },
];
---

<Layout 
  title="Fotografía" 
  description="Galería de trabajos de fotografía profesional por JEFILMZ. Eventos, retratos, producto y más."
  currentPath="/fotografia"
>
  <Navbar currentPath="/fotografia" />
  
  <main class="photography-page">
    <section class="page-hero">
      <div class="container">
        <div class="hero-content">
          <h1>Fotografía</h1>
          <p class="hero-subtitle">
            Cada imagen cuenta una historia. Desde eventos memorables hasta productos 
            que destacan, capturo momentos auténticos con técnica profesional.
          </p>
          
          <div class="hero-stats">
            <div class="stat">
              <span class="stat-number">500+</span>
              <span class="stat-label">Fotos entregadas</span>
            </div>
            <div class="stat">
              <span class="stat-number">50+</span>
              <span class="stat-label">Eventos cubiertos</span>
            </div>
            <div class="stat">
              <span class="stat-number">25+</span>
              <span class="stat-label">Marcas atendidas</span>
            </div>
          </div>
        </div>
      </div>
    </section>

    <section class="portfolio-section">
      <div class="container">
        <!-- Filtros de categorías -->
        <div class="category-filters" id="categoryFilters">
          {categorias.map((categoria) => (
            <button 
              class={`filter-btn ${categoria.id === 'todos' ? 'active' : ''}`}
              data-category={categoria.id}
            >
              <span class="filter-name">{categoria.name}</span>
              <span class="filter-count">({categoria.count})</span>
            </button>
          ))}
        </div>

        <!-- Grid de fotografías -->
        <div class="photography-grid" id="photographyGrid">
          {fotografias.map((foto) => (
            <div 
              class="photo-item"
              data-category={foto.category}
              data-photo-id={foto.id}
            >
              <div class="photo-container">
                <img 
                  src={foto.image} 
                  alt={foto.title}
                  loading="lazy"
                />
                
                <div class="photo-overlay">
                  <div class="photo-info">
                    <h3 class="photo-title">{foto.title}</h3>
                    <p class="photo-description">{foto.description}</p>
                    <div class="photo-tags">
                      {foto.tags.map((tag) => (
                        <span class="tag">{tag}</span>
                      ))}
                    </div>
                  </div>
                  
                  <div class="photo-actions">
                    <button class="action-btn view-btn" data-action="view" data-id={foto.id}>
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                        <circle cx="12" cy="12" r="3"/>
                      </svg>
                    </button>
                    <button class="action-btn info-btn" data-action="info" data-id={foto.id}>
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"/>
                        <path d="M12 16v-4M12 8h.01"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- CTA para más trabajos -->
        <div class="portfolio-cta">
          <h3>¿Te gustó mi trabajo?</h3>
          <p>Cada proyecto es único. Conversemos sobre cómo puedo capturar la esencia de tu evento o marca.</p>
          <div class="cta-buttons">
            <a href="/contacto" class="btn btn-primary">Solicitar cotización</a>
            <a href="/#servicios" class="btn btn-secondary">Ver otros servicios</a>
          </div>
        </div>
      </div>
    </section>

    <!-- Modal para vista detallada -->
    <div class="photo-modal" id="photoModal">
      <div class="modal-overlay" id="modalOverlay"></div>
      <div class="modal-content" id="modalContent">
        <button class="modal-close" id="modalClose">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
        
        <div class="modal-image" id="modalImage"></div>
        <div class="modal-info" id="modalInfo"></div>
        
        <div class="modal-navigation">
          <button class="nav-btn prev-btn" id="prevBtn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"/>
            </svg>
          </button>
          <button class="nav-btn next-btn" id="nextBtn">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .photography-page {
    padding-top: 80px;
  }

  .page-hero {
    padding: var(--spacing-xl) 0;
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
    text-align: center;
  }

  .hero-content h1 {
    font-size: clamp(3rem, 5vw, 4rem);
    margin-bottom: var(--spacing-sm);
    background: linear-gradient(135deg, var(--color-dark), var(--color-accent));
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .hero-subtitle {
    font-size: 1.3rem;
    color: var(--color-gray-dark);
    max-width: 600px;
    margin: 0 auto var(--spacing-lg);
    line-height: 1.6;
  }

  .hero-stats {
    display: flex;
    justify-content: center;
    gap: var(--spacing-lg);
    flex-wrap: wrap;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    color: var(--color-accent);
    font-family: var(--font-display);
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--color-gray);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .portfolio-section {
    padding: var(--spacing-xl) 0;
  }

  /* FILTROS */
  .category-filters {
    display: flex;
    justify-content: center;
    gap: var(--spacing-sm);
    flex-wrap: wrap;
    margin-bottom: var(--spacing-xl);
  }

  .filter-btn {
    display: flex;
    align-items: center;
    gap: var(--spacing-xs);
    padding: var(--spacing-xs) var(--spacing-sm);
    border: 2px solid var(--color-gray-light);
    background: var(--color-white);
    border-radius: 25px;
    font-weight: 500;
    cursor: pointer;
    transition: all var(--transition-normal);
    color: var(--color-gray-dark);
  }

  .filter-btn:hover {
    border-color: var(--color-accent);
    color: var(--color-accent);
    transform: translateY(-2px);
  }

  .filter-btn.active {
    background: var(--color-accent);
    border-color: var(--color-accent);
    color: var(--color-white);
  }

  .filter-count {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  /* GRID DE FOTOGRAFÍAS */
  .photography-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-xl);
  }

  .photo-item {
    border-radius: 12px;
    overflow: hidden;
    position: relative;
    background: var(--color-white);
    box-shadow: var(--shadow-md);
    transition: all var(--transition-normal);
    cursor: pointer;
    aspect-ratio: 4/3;
  }

  .photo-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg);
  }

  .photo-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .photo-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform var(--transition-slow);
  }

  .photo-item:hover .photo-container img {
    transform: scale(1.05);
  }

  .photo-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: var(--spacing-md);
    transform: translateY(100%);
    transition: transform var(--transition-normal);
  }

  .photo-item:hover .photo-overlay {
    transform: translateY(0);
  }

  .photo-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: var(--spacing-xs);
  }

  .photo-description {
    font-size: 0.9rem;
    opacity: 0.9;
    margin-bottom: var(--spacing-sm);
    line-height: 1.4;
  }

  .photo-tags {
    display: flex;
    gap: var(--spacing-xs);
    flex-wrap: wrap;
    margin-bottom: var(--spacing-sm);
  }

  .tag {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    padding: 2px 6px;
    border-radius: 8px;
    font-size: 0.7rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    backdrop-filter: blur(10px);
  }

  .photo-actions {
    display: flex;
    gap: var(--spacing-xs);
  }

  .action-btn {
    width: 36px;
    height: 36px;
    border: none;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(10px);
    transition: all var(--transition-fast);
  }

  .action-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
  }

  /* CTA SECTION */
  .portfolio-cta {
    text-align: center;
    padding: var(--spacing-xl);
    background: linear-gradient(135deg, var(--color-accent), var(--color-accent-alt));
    border-radius: 20px;
    color: white;
  }

  .portfolio-cta h3 {
    font-size: 2rem;
    margin-bottom: var(--spacing-sm);
  }

  .portfolio-cta p {
    font-size: 1.1rem;
    margin-bottom: var(--spacing-md);
    opacity: 0.9;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .cta-buttons {
    display: flex;
    gap: var(--spacing-sm);
    justify-content: center;
    flex-wrap: wrap;
  }

  .cta-buttons .btn {
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.3);
    color: white;
    backdrop-filter: blur(10px);
  }

  .cta-buttons .btn:hover {
    background: white;
    color: var(--color-dark);
  }

  /* MODAL */
  .photo-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: none;
    align-items: center;
    justify-content: center;
  }

  .photo-modal.active {
    display: flex;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(5px);
  }

  .modal-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    background: white;
    border-radius: 16px;
    overflow: hidden;
    display: grid;
    grid-template-columns: 2fr 1fr;
  }

  .modal-close {
    position: absolute;
    top: var(--spacing-sm);
    right: var(--spacing-sm);
    z-index: 10;
    width: 40px;
    height: 40px;
    border: none;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .modal-image {
    position: relative;
  }

  .modal-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .modal-info {
    padding: var(--spacing-lg);
  }

  .modal-navigation {
    position: absolute;
    bottom: var(--spacing-md);
    left: var(--spacing-md);
    display: flex;
    gap: var(--spacing-xs);
  }

  .nav-btn {
    width: 40px;
    height: 40px;
    border: none;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all var(--transition-fast);
  }

  .nav-btn:hover {
    background: white;
    transform: scale(1.1);
  }

  /* RESPONSIVE */
  @media (max-width: 768px) {
    .photography-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: var(--spacing-sm);
    }

    .hero-stats {
      gap: var(--spacing-md);
    }

    .category-filters {
      gap: var(--spacing-xs);
    }

    .filter-btn {
      padding: var(--spacing-xs);
      font-size: 0.9rem;
    }

    .modal-content {
      grid-template-columns: 1fr;
      max-width: 95vw;
      max-height: 95vh;
    }
  }

  /* ANIMACIONES DE FILTRADO */
  .photo-item.filtered-out {
    opacity: 0;
    transform: scale(0.8);
    pointer-events: none;
  }

  .photo-item.filtered-in {
    opacity: 1;
    transform: scale(1);
    pointer-events: auto;
  }
</style>

<script define:vars={{ fotografias }}>
  class PhotographyGallery {
    constructor() {
      this.currentFilter = 'todos';
      this.currentPhotoIndex = 0;
      this.photoItems = document.querySelectorAll('.photo-item');
      this.filterButtons = document.querySelectorAll('.filter-btn');
      this.modal = document.getElementById('photoModal');
      this.fotografias = fotografias;
      
      this.init();
    }

    init() {
      this.bindFilterEvents();
      this.bindPhotoEvents();
      this.bindModalEvents();
    }

    bindFilterEvents() {
      this.filterButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const category = e.currentTarget.dataset.category;
          this.filterPhotos(category);
          this.updateActiveFilter(btn);
        });
      });
    }

    filterPhotos(category) {
      this.currentFilter = category;
      
      this.photoItems.forEach(item => {
        const itemCategory = item.dataset.category;
        const shouldShow = category === 'todos' || itemCategory === category;
        
        item.classList.remove('filtered-in', 'filtered-out');
        
        if (shouldShow) {
          item.classList.add('filtered-in');
        } else {
          item.classList.add('filtered-out');
        }
      });
    }

    updateActiveFilter(activeBtn) {
      this.filterButtons.forEach(btn => btn.classList.remove('active'));
      activeBtn.classList.add('active');
    }

    bindPhotoEvents() {
      this.photoItems.forEach((item, index) => {
        // Click para abrir modal
        item.addEventListener('click', (e) => {
          if (!e.target.closest('.action-btn')) {
            const photoId = parseInt(item.dataset.photoId);
            this.openModal(photoId);
          }
        });

        // Eventos para botones de acción
        const actionBtns = item.querySelectorAll('.action-btn');
        actionBtns.forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.stopPropagation();
            const action = btn.dataset.action;
            const photoId = parseInt(btn.dataset.id);
            
            if (action === 'view') {
              this.openModal(photoId);
            } else if (action === 'info') {
              this.showPhotoInfo(photoId);
            }
          });
        });
      });
    }

    bindModalEvents() {
      const modalOverlay = document.getElementById('modalOverlay');
      const modalClose = document.getElementById('modalClose');
      const prevBtn = document.getElementById('prevBtn');
      const nextBtn = document.getElementById('nextBtn');
      
      [modalOverlay, modalClose].forEach(el => {
        el?.addEventListener('click', () => this.closeModal());
      });

      prevBtn?.addEventListener('click', () => this.showPrevPhoto());
      nextBtn?.addEventListener('click', () => this.showNextPhoto());

      // Cerrar con ESC, navegar con flechas
      document.addEventListener('keydown', (e) => {
        if (!this.modal?.classList.contains('active')) return;
        
        switch(e.key) {
          case 'Escape':
            this.closeModal();
            break;
          case 'ArrowLeft':
            this.showPrevPhoto();
            break;
          case 'ArrowRight':
            this.showNextPhoto();
            break;
        }
      });
    }

    openModal(photoId) {
      const photoIndex = this.fotografias.findIndex(f => f.id === photoId);
      if (photoIndex === -1) return;
      
      this.currentPhotoIndex = photoIndex;
      this.updateModalContent();
      
      if (this.modal) {
        this.modal.classList.add('active');
        document.body.style.overflow = 'hidden';
      }
    }

    closeModal() {
      if (this.modal) {
        this.modal.classList.remove('active');
        document.body.style.overflow = '';
      }
    }

    showPrevPhoto() {
      this.currentPhotoIndex = this.currentPhotoIndex > 0 
        ? this.currentPhotoIndex - 1 
        : this.fotografias.length - 1;
      this.updateModalContent();
    }

    showNextPhoto() {
      this.currentPhotoIndex = this.currentPhotoIndex < this.fotografias.length - 1 
        ? this.currentPhotoIndex + 1 
        : 0;
      this.updateModalContent();
    }

    updateModalContent() {
      const foto = this.fotografias[this.currentPhotoIndex];
      const modalImage = document.getElementById('modalImage');
      const modalInfo = document.getElementById('modalInfo');
      
      if (modalImage && modalInfo) {
        modalImage.innerHTML = `<img src="${foto.image}" alt="${foto.title}">`;
        
        modalInfo.innerHTML = `
          <h2>${foto.title}</h2>
          <p class="modal-description">${foto.description}</p>
          <div class="modal-tags">
            ${foto.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
          </div>
          <div class="modal-details">
            <h3>Detalles del proyecto</h3>
            ${Object.entries(foto.details).map(([key, value]) => 
              `<div class="detail-item">
                <strong>${key.replace('_', ' ')}:</strong> ${value}
              </div>`
            ).join('')}
          </div>
        `;
      }
    }

    showPhotoInfo(photoId) {
      const foto = this.fotografias.find(f => f.id === photoId);
      if (!foto) return;
      
      // Crear modal de información temporal
      const infoModal = document.createElement('div');
      infoModal.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 10000;
        display: flex;
        align-items: center;
        justify-content: center;
      `;
      
      infoModal.innerHTML = `
        <div style="background: white; padding: 2rem; border-radius: 12px; max-width: 500px; margin: 1rem;">
          <h3>${foto.title}</h3>
          <p>${foto.description}</p>
          <div style="margin-top: 1rem;">
            ${Object.entries(foto.details).map(([key, value]) => 
              `<div style="margin-bottom: 0.5rem;">
                <strong>${key.replace('_', ' ')}:</strong> ${value}
              </div>`
            ).join('')}
          </div>
          <button onclick="this.parentElement.parentElement.remove()" 
                  style="margin-top: 1rem; padding: 0.5rem 1rem; background: #FF7A59; color: white; border: none; border-radius: 6px; cursor: pointer;">
            Cerrar
          </button>
        </div>
      `;
      
      infoModal.addEventListener('click', (e) => {
        if (e.target === infoModal) {
          infoModal.remove();
        }
      });
      
      document.body.appendChild(infoModal);
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new PhotographyGallery();
  });
</script>
